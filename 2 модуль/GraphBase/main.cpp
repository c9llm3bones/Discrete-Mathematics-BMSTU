#include <iostream>#include <vector>#include <algorithm>#include <map>using namespace std;void topSortedDfs(int cur, vector<vector<int>>& graph, vector<int>& color, vector<int>& topSorted, int& i) {    color[cur] = 1;    for (int v : graph[cur]) {        if (color[v] == 0) {            topSortedDfs(v, graph, color, topSorted, i);        }    }    topSorted[i] = cur;    i--;    color[cur] = 2;}void dfs(int cur, vector<vector<int>>& graphT, map<int, bool>& visited, vector<int>& component, vector<int>& color, int currentColor) {    if (component.empty()) {        component.push_back(cur);        color[cur] = currentColor;    } else if (!component.empty() && component[0] < cur) {        component.push_back(cur);        color[cur] = currentColor;    } else {        int t = component[0];        component[0] = cur;        component.push_back(t);        color[cur] = currentColor;    }    visited[cur] = true;    for (int v : graphT[cur]) {        if (!visited[v]) {            dfs(v, graphT, visited, component, color, currentColor);        }    }}int main() {    int n, m;    cin >> n >> m;    vector<vector<int>> graph(n);    vector<vector<int>> graphT(n);    vector<int> topSorted(n);    vector<int> color(n);    for (int i = 0; i < m; i++) {        int x, y;        cin >> x >> y;        graph[x].push_back(y);        graphT[y].push_back(x);    }    int q = n - 1;    for (int i = 0; i < n; i++) {        if (color[i] == 0) {            topSortedDfs(i, graph, color, topSorted, q);        }    }    map<int, bool> visited;    vector<vector<int>> components;    int currentColor = 1;    color = vector<int>(n);    for (int v : topSorted) {        if (!visited[v]) {            vector<int> component;            dfs(v, graphT, visited, component, color, currentColor);            components.push_back(component);            currentColor++;        }    }    vector<int> answer;    for (auto& component : components) {        bool base = true;        int departer = component[0];        for (int v : component) {            for (int z : graphT[v]) {                if (color[departer] != color[z]) {                    base = false;                    break;                }            }        }        if (base) {            answer.push_back(departer);        }    }    sort(answer.begin(), answer.end());    for (int v : answer) {        cout << v << " ";    }    return 0;}