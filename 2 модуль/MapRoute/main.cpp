#include <bits/stdc++.h>#define pb push_back#define pii pair<int, int>using namespace std;vector<pii> steps = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};typedef long long ll;const int inf = 1e9;long rec(vector<vector<int>> map, vector<vector<int>>& dp, int n, int x, int y) {    if (x < 0 || y < 0 || x >= n || y >= n) {        return 100000000;    }    if (x == 0 && y == 0) {        return map[x][y];    }    dp[x][y] = map[x][y] + min( rec(map, dp, n, x, y-1),                                rec(map, dp, n, x-1, y) );    return dp[x][y];}bool used[1000000];void Dejkstra() {}int main() {    int n;    cin >> n;    vector<vector<int>> map(n, vector<int>(n));    long ans = 0;    vector<vector<int>> dp(n, vector<int>(n, inf));    for (int i = 0; i < n; i++) {        for (int j = 0; j < n; j++) {            cin >> map[i][j];        }    }    priority_queue<pair<ll, pair<int, int>>> q;    dp[0][0] = map[0][0];    q.push({map[0][0], {0, 0}});    while(!q.empty()) {        pii v = q.top().second;        ll cur_d = -q.top().first;        q.pop();        if (cur_d > dp[v.first][v.second])            continue;        for (auto step: steps) {            int x1 = v.first, y1 = v.second, x2 = step.first, y2 = step.second;            if (x1 + x2 >= n || x1 + x2 < 0 || y1 + y2 >= n || y1 + y2 < 0) {                continue;            }            int len = map[x1 + x2][y1 + y2];            if (dp[x1][y1] + len < dp[x1 + x2][y1 + y2]) {                dp[x1 + x2][y1 + y2] = dp[x1][y1] + len;                q.push({-dp[x1 + x2][y1 + y2], {x1 + x2, y1 + y2}});            }        }    }    cout << dp[n-1][n-1];    return 0;}